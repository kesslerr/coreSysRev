"0","pes <- c()"
"0","for (d in 1:25){"
"0","  if (d==1){knot.times <- median(mcycle$times)}"
"0","  else{"
"0","    quantiles <- seq(0,1,1/(d+1))"
"0","    quantiles <- head(tail(quantiles, -1),-1)"
"0","    knot.times <- quantile(mcycle$times, quantiles)"
"0","  }"
"0","  "
"0","  # manual cv"
"0","  "
"0","  pes.it <- c()"
"0","  for (i in 1:50){"
"0","    #Create training set"
"0","    train <- mcycle %>% sample_frac(.70)"
"0","    #Create test set"
"0","    test  <- anti_join(mcycle, train, by = 'times')"
"0","    "
"0","    "
"0","    # train it"
"0","    skip_to_next <- FALSE"
"0","    # Note that print(b) fails since b doesn't exist"
"0","    tryCatch(model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train), "
"0","             error = function(e) { skip_to_next <<- TRUE})"
"0","    if(skip_to_next) { next }  "
"0","    "
"0","    #try(expr = model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train),"
"0","      "
"0","    "
"0","    # test it"
"0","    tryCatch(predictions <- predict(model.bs.cv, newdata = test), "
"0","             error = function(e) { skip_to_next <<- TRUE})"
"0","    if(skip_to_next) { next }  "
"0","    #predictions <- predict(model.bs.cv, newdata = test)"
"0","  "
"0","    pes.it <- c(pes.it, mean((predictions-test$accel)**2))"
"0","  }"
"0","  pes <- c(pes,mean(pes.it))"
"0","  "
"0","}"
"0","d = 1:length(pes)"
"0","ggplot() + "
"0","  geom_line(aes(x = d, y = pes)) +"
"0","  geom_vline(xintercept = match(min(pes),pes), color = ""red"")"
