---
title: "R Notebook"
output: html_notebook
---

# calculate significances within study with BMA parameters

```{r}
library(ggplot2)
library(gridExtra)

thresh <- 0.05/6 
colorRange = c(-1.5,1.5)

myTheme <- theme(
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank(),
    panel.background = element_rect(fill = "transparent",colour = NA),
    plot.background = element_rect(fill = "transparent",colour = NA),
    axis.text.x = element_text(color="black", size=10, face = "bold", angle=0),# x tick labels
    axis.text.y = element_text(color="black", size=10, face = "bold", angle=0),# y tick labels
    axis.title = element_text(size=12, face="italic"),
    #axis.title.y = element_text(size=12, face="bold"),
    plot.title = element_text(size=15, face="bold"),
    plot.tag = element_text(size=15, face="bold"),
    panel.border = element_blank(),
    legend.position = "none"
    )

```


# Study 1


## A-matrix

```{r}
tt <- apply(dfEFP$mEpsA, c(1,2), t.test) # t.test into 3rd dimension

mean_val <- matrix(nrow = 3, ncol=3)
p_val <- matrix(nrow = 3, ncol=3)
dfLong <- data.frame(Source=numeric(0), Target=numeric(0), Type=character(0), Value=numeric(0), stringsAsFactors=FALSE)


for (y in 1 : dim(tt)[1]){
  for (x in 1: dim(tt)[2]){
    if (y==x){next} # ommit self connections
    mean_val[y,x] <- tt[[y,x]]$estimate
    p_val[y,x] <- tt[[y,x]]$p.value
    
    # put in long DF for plotting
    dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept", mean_val[y,x] )
    dfLong[nrow(dfLong) + 1,] = list(x,y, "p", p_val[y,x] )
    if (p_val[y,x] <= thres){
      dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept_sig",paste(round(mean_val[y,x],2),"*") )
    } else {
      dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept_sig", paste(round(mean_val[y,x],2),"") )
    }
  }
}

print(mean_val)
print(p_val)

p11 <- qplot(x=Source , y=Target , data=subset(dfLong, Type == "intercept"), fill=as.numeric(Value), geom="tile") +
  geom_text(data=subset(dfLong, Type == "intercept_sig"), aes(label = Value, size = 35)) +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint=0, limits=colorRange) +
  scale_x_discrete(limits=c("OFA","FFA","STS")) +
  scale_y_discrete(limits=c("OFA","FFA","STS")) +
  myTheme +
  labs(title = "A-matrix", x = "source region", y = "target region") + #,  tag = "B"
  coord_equal() +
  facet_grid()
p11

```

## B-matrix faces
```{r}
tt <- apply(dfEFP$mEpsBFaces, c(1,2), t.test) # t.test into 3rd dimension

mean_val <- matrix(nrow = 3, ncol=3)
p_val <- matrix(nrow = 3, ncol=3)
dfLong <- data.frame(Source=numeric(0), Target=numeric(0), Type=character(0), Value=numeric(0), stringsAsFactors=FALSE)


for (y in 1 : dim(tt)[1]){
  for (x in 1: dim(tt)[2]){
    if (y==x){next} # ommit self connections
    mean_val[y,x] <- tt[[y,x]]$estimate
    p_val[y,x] <- tt[[y,x]]$p.value
    
    # put in long DF for plotting
    dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept", mean_val[y,x] )
    dfLong[nrow(dfLong) + 1,] = list(x,y, "p", p_val[y,x] )
    if (p_val[y,x] <= thres){
      dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept_sig",paste(round(mean_val[y,x],2),"*") )
    } else {
      dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept_sig", paste(round(mean_val[y,x],2),"") )
    }
  }
}

print(mean_val)
print(p_val)

p12 <- qplot(x=Source , y=Target , data=subset(dfLong, Type == "intercept"), fill=as.numeric(Value), geom="tile") +
  geom_text(data=subset(dfLong, Type == "intercept_sig"), aes(label = Value, size = 35)) +
  #scale_fill_gradientn(colors = c("blue","white","red"), values = scales::rescale(c(-1.5, -0.5, 0, 0.5, 1.5))) +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint=0, limits=colorRange) +
  scale_x_discrete(limits=c("OFA","FFA","STS")) +
  scale_y_discrete(limits=c("OFA","FFA","STS")) +
  myTheme +
  labs(title = "B-matrix \'faces\'", x = "source region", y = "target region") + #,  tag = "B"
  coord_equal() +
  facet_grid()
p12

```

## B-matrix emotions
```{r}
tt <- apply(dfEFP$mEpsBEmotions, c(1,2), t.test) # t.test into 3rd dimension

mean_val <- matrix(nrow = 3, ncol=3)
p_val <- matrix(nrow = 3, ncol=3)
dfLong <- data.frame(Source=numeric(0), Target=numeric(0), Type=character(0), Value=numeric(0), stringsAsFactors=FALSE)


for (y in 1 : dim(tt)[1]){
  for (x in 1: dim(tt)[2]){
    if (y==x){next} # ommit self connections
    mean_val[y,x] <- tt[[y,x]]$estimate
    p_val[y,x] <- tt[[y,x]]$p.value
    
    # put in long DF for plotting
    dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept", mean_val[y,x] )
    dfLong[nrow(dfLong) + 1,] = list(x,y, "p", p_val[y,x] )
    if (p_val[y,x] <= thres){
      dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept_sig",paste(round(mean_val[y,x],2),"*") )
    } else {
      dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept_sig", paste(round(mean_val[y,x],2),"") )
    }
  }
}

print(mean_val)
print(p_val)

p13 <- qplot(x=Source , y=Target , data=subset(dfLong, Type == "intercept"), fill=as.numeric(Value), geom="tile") +
  geom_text(data=subset(dfLong, Type == "intercept_sig"), aes(label = Value, size = 35)) +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint=0, limits=colorRange) +
  scale_x_discrete(limits=c("OFA","FFA","STS")) +
  scale_y_discrete(limits=c("OFA","FFA","STS")) +
  myTheme +
  labs(title = "B-matrix \'emotions\'", x = "source region", y = "target region") + #,  tag = "B"
  coord_equal() +
  facet_grid()
p13

```

# Study 2


## A-matrix

```{r}
tt <- apply(dfFEM$mEpsA, c(1,2), t.test) # t.test into 3rd dimension

mean_val <- matrix(nrow = 3, ncol=3)
p_val <- matrix(nrow = 3, ncol=3)
dfLong <- data.frame(Source=numeric(0), Target=numeric(0), Type=character(0), Value=numeric(0), stringsAsFactors=FALSE)


for (y in 1 : dim(tt)[1]){
  for (x in 1: dim(tt)[2]){
    if (y==x){next} # ommit self connections
    mean_val[y,x] <- tt[[y,x]]$estimate
    p_val[y,x] <- tt[[y,x]]$p.value
    
    # put in long DF for plotting
    dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept", mean_val[y,x] )
    dfLong[nrow(dfLong) + 1,] = list(x,y, "p", p_val[y,x] )
    if (p_val[y,x] <= thres){
      dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept_sig",paste(round(mean_val[y,x],2),"*") )
    } else {
      dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept_sig", paste(round(mean_val[y,x],2),"") )
    }
  }
}

print(mean_val)
print(p_val)

p21 <- qplot(x=Source , y=Target , data=subset(dfLong, Type == "intercept"), fill=as.numeric(Value), geom="tile") +
  geom_text(data=subset(dfLong, Type == "intercept_sig"), aes(label = Value, size = 35)) +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint=0, limits=colorRange) +
  scale_x_discrete(limits=c("OFA","FFA","STS")) +
  scale_y_discrete(limits=c("OFA","FFA","STS")) +
  myTheme +
  labs( x = "source region", y = "target region") + #,  tag = "B"
  coord_equal() +
  facet_grid()
p21

```

## B-matrix faces
```{r}
tt <- apply(dfFEM$mEpsBFaces, c(1,2), t.test) # t.test into 3rd dimension

mean_val <- matrix(nrow = 3, ncol=3)
p_val <- matrix(nrow = 3, ncol=3)
dfLong <- data.frame(Source=numeric(0), Target=numeric(0), Type=character(0), Value=numeric(0), stringsAsFactors=FALSE)


for (y in 1 : dim(tt)[1]){
  for (x in 1: dim(tt)[2]){
    if (y==x){next} # ommit self connections
    mean_val[y,x] <- tt[[y,x]]$estimate
    p_val[y,x] <- tt[[y,x]]$p.value
    
    # put in long DF for plotting
    dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept", mean_val[y,x] )
    dfLong[nrow(dfLong) + 1,] = list(x,y, "p", p_val[y,x] )
    if (p_val[y,x] <= thres){
      dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept_sig",paste(round(mean_val[y,x],2),"*") )
    } else {
      dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept_sig", paste(round(mean_val[y,x],2),"") )
    }
  }
}

print(mean_val)
print(p_val)

p22 <- qplot(x=Source , y=Target , data=subset(dfLong, Type == "intercept"), fill=as.numeric(Value), geom="tile") +
  geom_text(data=subset(dfLong, Type == "intercept_sig"), aes(label = Value, size = 35)) +
  #scale_fill_gradientn(colors = c("blue","white","red"), values = scales::rescale(c(-1.5, -0.5, 0, 0.5, 1.5))) +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint=0, limits=colorRange) +
  scale_x_discrete(limits=c("OFA","FFA","STS")) +
  scale_y_discrete(limits=c("OFA","FFA","STS")) +
  myTheme +
  labs(x = "source region", y = "target region") + #,  tag = "B"
  coord_equal() +
  facet_grid()
p22

```

## B-matrix emotions
```{r}
tt <- apply(dfFEM$mEpsBEmotions, c(1,2), t.test) # t.test into 3rd dimension

mean_val <- matrix(nrow = 3, ncol=3)
p_val <- matrix(nrow = 3, ncol=3)
dfLong <- data.frame(Source=numeric(0), Target=numeric(0), Type=character(0), Value=numeric(0), stringsAsFactors=FALSE)


for (y in 1 : dim(tt)[1]){
  for (x in 1: dim(tt)[2]){
    if (y==x){next} # ommit self connections
    mean_val[y,x] <- tt[[y,x]]$estimate
    p_val[y,x] <- tt[[y,x]]$p.value
    
    # put in long DF for plotting
    dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept", mean_val[y,x] )
    dfLong[nrow(dfLong) + 1,] = list(x,y, "p", p_val[y,x] )
    if (p_val[y,x] <= thres){
      dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept_sig",paste(round(mean_val[y,x],2),"*") )
    } else {
      dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept_sig", paste(round(mean_val[y,x],2),"") )
    }
  }
}

print(mean_val)
print(p_val)

p23 <- qplot(x=Source , y=Target , data=subset(dfLong, Type == "intercept"), fill=as.numeric(Value), geom="tile") +
  geom_text(data=subset(dfLong, Type == "intercept_sig"), aes(label = Value, size = 35)) +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint=0, limits=colorRange) +
  scale_x_discrete(limits=c("OFA","FFA","STS")) +
  scale_y_discrete(limits=c("OFA","FFA","STS")) +
  myTheme +
  labs( x = "source region", y = "target region") + #,  tag = "B"
  coord_equal() +
  facet_grid()
p23

```


## Study 3-1


## A-matrix

```{r}
tt <- apply(dfCYM$mEpsA, c(1,2), t.test) # t.test into 3rd dimension

mean_val <- matrix(nrow = 3, ncol=3)
p_val <- matrix(nrow = 3, ncol=3)
dfLong <- data.frame(Source=numeric(0), Target=numeric(0), Type=character(0), Value=numeric(0), stringsAsFactors=FALSE)


for (y in 1 : dim(tt)[1]){
  for (x in 1: dim(tt)[2]){
    if (y==x){next} # ommit self connections
    mean_val[y,x] <- tt[[y,x]]$estimate
    p_val[y,x] <- tt[[y,x]]$p.value
    
    # put in long DF for plotting
    dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept", mean_val[y,x] )
    dfLong[nrow(dfLong) + 1,] = list(x,y, "p", p_val[y,x] )
    if (p_val[y,x] <= thres){
      dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept_sig",paste(round(mean_val[y,x],2),"*") )
    } else {
      dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept_sig", paste(round(mean_val[y,x],2),"") )
    }
  }
}

print(mean_val)
print(p_val)

p31 <- qplot(x=Source , y=Target , data=subset(dfLong, Type == "intercept"), fill=as.numeric(Value), geom="tile") +
  geom_text(data=subset(dfLong, Type == "intercept_sig"), aes(label = Value, size = 35)) +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint=0, limits=colorRange) +
  scale_x_discrete(limits=c("OFA","FFA","STS")) +
  scale_y_discrete(limits=c("OFA","FFA","STS")) +
  myTheme +
  labs( x = "source region", y = "target region") + #,  tag = "B"
  coord_equal() +
  facet_grid()
p31

```

## B-matrix faces
```{r}
tt <- apply(dfCYM$mEpsBFaces, c(1,2), t.test) # t.test into 3rd dimension

mean_val <- matrix(nrow = 3, ncol=3)
p_val <- matrix(nrow = 3, ncol=3)
dfLong <- data.frame(Source=numeric(0), Target=numeric(0), Type=character(0), Value=numeric(0), stringsAsFactors=FALSE)


for (y in 1 : dim(tt)[1]){
  for (x in 1: dim(tt)[2]){
    if (y==x){next} # ommit self connections
    mean_val[y,x] <- tt[[y,x]]$estimate
    p_val[y,x] <- tt[[y,x]]$p.value
    
    # put in long DF for plotting
    dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept", mean_val[y,x] )
    dfLong[nrow(dfLong) + 1,] = list(x,y, "p", p_val[y,x] )
    if (p_val[y,x] <= thres){
      dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept_sig",paste(round(mean_val[y,x],2),"*") )
    } else {
      dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept_sig", paste(round(mean_val[y,x],2),"") )
    }
  }
}

print(mean_val)
print(p_val)

p32 <- qplot(x=Source , y=Target , data=subset(dfLong, Type == "intercept"), fill=as.numeric(Value), geom="tile") +
  geom_text(data=subset(dfLong, Type == "intercept_sig"), aes(label = Value, size = 35)) +
  #scale_fill_gradientn(colors = c("blue","white","red"), values = scales::rescale(c(-1.5, -0.5, 0, 0.5, 1.5))) +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint=0, limits=colorRange) +
  scale_x_discrete(limits=c("OFA","FFA","STS")) +
  scale_y_discrete(limits=c("OFA","FFA","STS")) +
  myTheme +
  labs(x = "source region", y = "target region") + #,  tag = "B"
  coord_equal() +
  facet_grid()
p32

```

## study 3 - 2


## A-matrix

```{r}
tt <- apply(dfCYP$mEpsA, c(1,2), t.test) # t.test into 3rd dimension

mean_val <- matrix(nrow = 3, ncol=3)
p_val <- matrix(nrow = 3, ncol=3)
dfLong <- data.frame(Source=numeric(0), Target=numeric(0), Type=character(0), Value=numeric(0), stringsAsFactors=FALSE)


for (y in 1 : dim(tt)[1]){
  for (x in 1: dim(tt)[2]){
    if (y==x){next} # ommit self connections
    mean_val[y,x] <- tt[[y,x]]$estimate
    p_val[y,x] <- tt[[y,x]]$p.value
    
    # put in long DF for plotting
    dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept", mean_val[y,x] )
    dfLong[nrow(dfLong) + 1,] = list(x,y, "p", p_val[y,x] )
    if (p_val[y,x] <= thres){
      dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept_sig",paste(round(mean_val[y,x],2),"*") )
    } else {
      dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept_sig", paste(round(mean_val[y,x],2),"") )
    }
  }
}

print(mean_val)
print(p_val)

p41 <- qplot(x=Source , y=Target , data=subset(dfLong, Type == "intercept"), fill=as.numeric(Value), geom="tile") +
  geom_text(data=subset(dfLong, Type == "intercept_sig"), aes(label = Value, size = 35)) +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint=0, limits=colorRange) +
  scale_x_discrete(limits=c("OFA","FFA","STS")) +
  scale_y_discrete(limits=c("OFA","FFA","STS")) +
  myTheme +
  labs( x = "source region", y = "target region") + #,  tag = "B"
  coord_equal() +
  facet_grid()
p41

```

## B-matrix faces
```{r}
tt <- apply(dfCYP$mEpsBFaces, c(1,2), t.test) # t.test into 3rd dimension

mean_val <- matrix(nrow = 3, ncol=3)
p_val <- matrix(nrow = 3, ncol=3)
dfLong <- data.frame(Source=numeric(0), Target=numeric(0), Type=character(0), Value=numeric(0), stringsAsFactors=FALSE)


for (y in 1 : dim(tt)[1]){
  for (x in 1: dim(tt)[2]){
    if (y==x){next} # ommit self connections
    mean_val[y,x] <- tt[[y,x]]$estimate
    p_val[y,x] <- tt[[y,x]]$p.value
    
    # put in long DF for plotting
    dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept", mean_val[y,x] )
    dfLong[nrow(dfLong) + 1,] = list(x,y, "p", p_val[y,x] )
    if (p_val[y,x] <= thres){
      dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept_sig",paste(round(mean_val[y,x],2),"*") )
    } else {
      dfLong[nrow(dfLong) + 1,] = list(x,y, "intercept_sig", paste(round(mean_val[y,x],2),"") )
    }
  }
}

print(mean_val)
print(p_val)

p42 <- qplot(x=Source , y=Target , data=subset(dfLong, Type == "intercept"), fill=as.numeric(Value), geom="tile") +
  geom_text(data=subset(dfLong, Type == "intercept_sig"), aes(label = Value, size = 35)) +
  #scale_fill_gradientn(colors = c("blue","white","red"), values = scales::rescale(c(-1.5, -0.5, 0, 0.5, 1.5))) +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint=0, limits=colorRange) +
  scale_x_discrete(limits=c("OFA","FFA","STS")) +
  scale_y_discrete(limits=c("OFA","FFA","STS")) +
  myTheme +
  labs(x = "source region", y = "target region") + #,  tag = "B"
  coord_equal() +
  facet_grid()
p42

```


# plot all in 1

```{r}
library(grid)
blank <- grid.rect(gp=gpar(col="white"))
text1 <- ggplot() + annotate("text", x = 4, y = 25, size=6, label = "study\n1") + theme_void()
text2 <- ggplot() + annotate("text", x = 4, y = 25, size=6, label = "study\n2") + theme_void()
text3 <- ggplot() + annotate("text", x = 4, y = 25, size=6, label = "study\n3-1") + theme_void()
text4 <- ggplot() + annotate("text", x = 4, y = 25, size=6, label = "study\n3-2") + theme_void()

comp <- grid.arrange(text1,p11,p12,p13,
             text2,p21,p22,p23,
             text3,p31,p32, blank,
             text4,p41,p42, blank, ncol = 4)
ggsave("../plots/BMA_Matrices_ABB_Studys_1-2-31-32.png", comp, height = 15, width = 12)
```


# C matrices

```{r}
dfEFP$mEpC[1,1]
dfFEM$mEpC[1,1]
dfCYM$mEpC[1,1]
dfCYP$mEpC[1,1]

```



