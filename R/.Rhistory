mcycle1 <- mcycle %>% filter(times <= median.times)
mcycle2 <- mcycle %>% filter(times > median.times)
library(splines)
model.bs <- lm(accel ~ bs(times, knots = median.times), data = mcycle)
library(splines)
model.bs <- lm(accel ~ bs(times, knots = median.times), data = mcycle)
summary(model.bs)
predictions <- predict(model.bs)
p1 + geom_line(aes(x = times, y = predictions), color = "red", lwd = 2)
library(splines2)
install.packages("splines2")
library(splines2)
model.bs <- lm(accel ~ bSpline(times, knots = median.times), data = mcycle)
summary(model.bs)
library(splines2)
model.bs <- lm(accel ~ bSpline(times, knots = median.times), data = mcycle)
summary(model.bs)
predictions <- predict(model.bs)
p1 + geom_line(aes(x = times, y = predictions), color = "red", lwd = 2)
bSpline(times, knots = median.times)
bSpline(mcycle$times, knots = median.times)
library(splines2)
model.bs <- lm(accel ~ bSpline(times, knots = median.times), data = mcycle)
#bSpline(mcycle$times, knots = median.times)
summary(model.bs)
predictions <- predict(model.bs)
p1 + geom_line(aes(x = times, y = predictions), color = "red", lwd = 2)
quantile(mcycle$times,1)
quantile(mcycle$times,2)
quantile(mcycle$times,c(0.5))
quantile(mcycle$times,c(0.33))
quantile(mcycle$times,seq(0,1,2))
seq(0,1,2)
seq(0,2,2)
seq(0,1,1/2)
quantile(mcycle$times,1)
seq(0,1,1/3)
test <- seq(0,1,1/3)
test[2:end-1]
test[2:-1]
test[2:]
test
test[2:,]
test[2]
head(test)
head(test, -1)
tail(test, -1)
head(tail(test, -1),-1)
seq(0,1,1/d)
seq(0,1,1/2)
quantiles <- seq(0,1,1/(d+1))
quantiles <- seq(0,1,1/(1+1))
d=4
quantiles <- seq(0,1,1/(d+1))
quantiles <- head(tail(quantiles, 1),1)
knot.times <- quantile(mcycle$times, quantiles)
knot.times
quantiles
seq(0,1,1/(d+1))
quantiles <- seq(0,1,1/(d+1))
quantiles <- head(tail(quantiles, -1),-1)
knot.times <- quantile(mcycle$times, quantiles)
knot.times
pes <- c()
for (d in 1:17){
if (d==1){knot.times <- median(mcycle$times)}
else
if (d==2){knot.times <- median(mcycle$times)}
quantiles <- seq(0,1,1/(d+1))
quantiles <- head(tail(quantiles, -1),-1)
knot.times <- quantile(mcycle$times, quantiles)
model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = mcycle)
glmresult <- cv.glm(mcycle, model.bs.cv)
#cat(glmresult$delta[2],"\n")
pes <- c(pes,glmresult$delta[2])
}
d
pes <- c()
for (d in 1:17){
if (d==1){knot.times <- median(mcycle$times)}
else{
quantiles <- seq(0,1,1/(d+1))
quantiles <- head(tail(quantiles, -1),-1)
knot.times <- quantile(mcycle$times, quantiles)
}
model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = mcycle)
glmresult <- cv.glm(mcycle, model.bs.cv)
#cat(glmresult$delta[2],"\n")
pes <- c(pes,glmresult$delta[2])
}
d
median(mcycle$times)
pes <- c()
for (d in 1:17){
if (d==1){knot.times <- median(mcycle$times)}
else{
quantiles <- seq(0,1,1/(d+1))
quantiles <- head(tail(quantiles, -1),-1)
knot.times <- quantile(mcycle$times, quantiles)
}
model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = mcycle)
#glmresult <- cv.glm(mcycle, model.bs.cv)
#pes <- c(pes,glmresult$delta[2])
}
pes <- c()
for (d in 1:17){
if (d==1){knot.times <- median(mcycle$times)}
else{
quantiles <- seq(0,1,1/(d+1))
quantiles <- head(tail(quantiles, -1),-1)
knot.times <- quantile(mcycle$times, quantiles)
}
model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = mcycle)
glmresult <- cv.lm(mcycle, model.bs.cv)
#pes <- c(pes,glmresult$delta[2])
}
pes <- c()
for (d in 1:17){
if (d==1){knot.times <- median(mcycle$times)}
else{
quantiles <- seq(0,1,1/(d+1))
quantiles <- head(tail(quantiles, -1),-1)
knot.times <- quantile(mcycle$times, quantiles)
}
model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = mcycle)
summary(model.bs.cv)
#glmresult <- cv.glm(mcycle, model.bs.cv)
#pes <- c(pes,glmresult$delta[2])
}
summary(model.bs.cv)
# manual cv
## train test split
#Create training set
train <- mcycle %>% sample_frac(.70)
#Create test set
test  <- anti_join(mcycle, train, by = 'times')
train
test
train
# train it
model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train)
# test it
predictions <- predict(model.bs.cv, newdata = test)
predictions
mse <- mean((predictions-test$accel)**2)
mse
pes <- c()
for (d in 1:17){
if (d==1){knot.times <- median(mcycle$times)}
else{
quantiles <- seq(0,1,1/(d+1))
quantiles <- head(tail(quantiles, -1),-1)
knot.times <- quantile(mcycle$times, quantiles)
}
# manual cv
## train test split
#Create training set
train <- mcycle %>% sample_frac(.70)
#Create test set
test  <- anti_join(mcycle, train, by = 'times')
# train it
model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train)
# test it
predictions <- predict(model.bs.cv, newdata = test)
mse <- mean((predictions-test$accel)**2)
pes <- c(pes,mse)
}
pes
pes <- c()
for (d in 1:17){
if (d==1){knot.times <- median(mcycle$times)}
else{
quantiles <- seq(0,1,1/(d+1))
quantiles <- head(tail(quantiles, -1),-1)
knot.times <- quantile(mcycle$times, quantiles)
}
# manual cv
pes.it <- c()
for (i in 1:100){
#Create training set
train <- mcycle %>% sample_frac(.70)
#Create test set
test  <- anti_join(mcycle, train, by = 'times')
# train it
model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train)
# test it
predictions <- predict(model.bs.cv, newdata = test)
pes.it <- c(pes.it, mean((predictions-test$accel)**2))
}
pes <- c(pes,mean(pes.it))
}
d
i
pes <- c()
for (d in 1:17){
if (d==1){knot.times <- median(mcycle$times)}
else{
quantiles <- seq(0,1,1/(d+1))
quantiles <- head(tail(quantiles, -1),-1)
knot.times <- quantile(mcycle$times, quantiles)
}
# manual cv
pes.it <- c()
for (i in 1:10){
#Create training set
train <- mcycle %>% sample_frac(.70)
#Create test set
test  <- anti_join(mcycle, train, by = 'times')
# train it
model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train)
# test it
predictions <- predict(model.bs.cv, newdata = test)
pes.it <- c(pes.it, mean((predictions-test$accel)**2))
}
pes <- c(pes,mean(pes.it))
}
d
i
silent_attempt(log("a"))
silent_attempt(log("a")), print(1)
attempt(log("a")), print(1)
attempt(log("a"))
attempt(log("a")); print(1)
pes <- c()
for (d in 1:17){
if (d==1){knot.times <- median(mcycle$times)}
else{
quantiles <- seq(0,1,1/(d+1))
quantiles <- head(tail(quantiles, -1),-1)
knot.times <- quantile(mcycle$times, quantiles)
}
# manual cv
pes.it <- c()
for (i in 1:5){
#Create training set
train <- mcycle %>% sample_frac(.70)
#Create test set
test  <- anti_join(mcycle, train, by = 'times')
# train it
model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train)
# test it
predictions <- predict(model.bs.cv, newdata = test)
pes.it <- c(pes.it, mean((predictions-test$accel)**2))
}
pes <- c(pes,mean(pes.it))
}
d
i
pes <- c()
for (d in 1:17){
if (d==1){knot.times <- median(mcycle$times)}
else{
quantiles <- seq(0,1,1/(d+1))
quantiles <- head(tail(quantiles, -1),-1)
knot.times <- quantile(mcycle$times, quantiles)
}
# manual cv
pes.it <- c()
for (i in 1:5){
#Create training set
train <- mcycle %>% sample_frac(.70)
#Create test set
test  <- anti_join(mcycle, train, by = 'times')
# train it
skip_to_next <- FALSE
# Note that print(b) fails since b doesn't exist
tryCatch(model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train),
error = function(e) { skip_to_next <<- TRUE})
if(skip_to_next) { next }
#try(expr = model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train),
# test it
predictions <- predict(model.bs.cv, newdata = test)
pes.it <- c(pes.it, mean((predictions-test$accel)**2))
}
pes <- c(pes,mean(pes.it))
}
pes <- c()
for (d in 1:17){
if (d==1){knot.times <- median(mcycle$times)}
else{
quantiles <- seq(0,1,1/(d+1))
quantiles <- head(tail(quantiles, -1),-1)
knot.times <- quantile(mcycle$times, quantiles)
}
# manual cv
pes.it <- c()
for (i in 1:5){
#Create training set
train <- mcycle %>% sample_frac(.70)
#Create test set
test  <- anti_join(mcycle, train, by = 'times')
# train it
skip_to_next <- FALSE
# Note that print(b) fails since b doesn't exist
tryCatch(model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train),
error = function(e) { skip_to_next <<- TRUE})
if(skip_to_next) { next }
#try(expr = model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train),
# test it
#predictions <- predict(model.bs.cv, newdata = test)
#pes.it <- c(pes.it, mean((predictions-test$accel)**2))
}
#pes <- c(pes,mean(pes.it))
}
pes
pes <- c()
for (d in 1:17){
if (d==1){knot.times <- median(mcycle$times)}
else{
quantiles <- seq(0,1,1/(d+1))
quantiles <- head(tail(quantiles, -1),-1)
knot.times <- quantile(mcycle$times, quantiles)
}
# manual cv
pes.it <- c()
for (i in 1:5){
#Create training set
train <- mcycle %>% sample_frac(.70)
#Create test set
test  <- anti_join(mcycle, train, by = 'times')
# train it
skip_to_next <- FALSE
# Note that print(b) fails since b doesn't exist
tryCatch(model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train),
error = function(e) { skip_to_next <<- TRUE})
if(skip_to_next) { next }
#try(expr = model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train),
# test it
tryCatch(predictions <- predict(model.bs.cv, newdata = test),
error = function(e) { skip_to_next <<- TRUE})
if(skip_to_next) { next }
#predictions <- predict(model.bs.cv, newdata = test)
pes.it <- c(pes.it, mean((predictions-test$accel)**2))
}
pes <- c(pes,mean(pes.it))
}
pes
pes <- c()
for (d in 1:17){
if (d==1){knot.times <- median(mcycle$times)}
else{
quantiles <- seq(0,1,1/(d+1))
quantiles <- head(tail(quantiles, -1),-1)
knot.times <- quantile(mcycle$times, quantiles)
}
# manual cv
pes.it <- c()
for (i in 1:50){
#Create training set
train <- mcycle %>% sample_frac(.70)
#Create test set
test  <- anti_join(mcycle, train, by = 'times')
# train it
skip_to_next <- FALSE
# Note that print(b) fails since b doesn't exist
tryCatch(model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train),
error = function(e) { skip_to_next <<- TRUE})
if(skip_to_next) { next }
#try(expr = model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train),
# test it
tryCatch(predictions <- predict(model.bs.cv, newdata = test),
error = function(e) { skip_to_next <<- TRUE})
if(skip_to_next) { next }
#predictions <- predict(model.bs.cv, newdata = test)
pes.it <- c(pes.it, mean((predictions-test$accel)**2))
}
pes <- c(pes,mean(pes.it))
}
d = 1:length(pes)
ggplot() +
geom_line(aes(x = d, y = pes)) +
geom_vline(xintercept = match(min(pes),pes), color = "red")
pes <- c()
for (d in 1:50){
if (d==1){knot.times <- median(mcycle$times)}
else{
quantiles <- seq(0,1,1/(d+1))
quantiles <- head(tail(quantiles, -1),-1)
knot.times <- quantile(mcycle$times, quantiles)
}
# manual cv
pes.it <- c()
for (i in 1:50){
#Create training set
train <- mcycle %>% sample_frac(.70)
#Create test set
test  <- anti_join(mcycle, train, by = 'times')
# train it
skip_to_next <- FALSE
# Note that print(b) fails since b doesn't exist
tryCatch(model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train),
error = function(e) { skip_to_next <<- TRUE})
if(skip_to_next) { next }
#try(expr = model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train),
# test it
tryCatch(predictions <- predict(model.bs.cv, newdata = test),
error = function(e) { skip_to_next <<- TRUE})
if(skip_to_next) { next }
#predictions <- predict(model.bs.cv, newdata = test)
pes.it <- c(pes.it, mean((predictions-test$accel)**2))
}
pes <- c(pes,mean(pes.it))
}
d = 1:length(pes)
ggplot() +
geom_line(aes(x = d, y = pes)) +
geom_vline(xintercept = match(min(pes),pes), color = "red")
pes <- c()
for (d in 1:35){
if (d==1){knot.times <- median(mcycle$times)}
else{
quantiles <- seq(0,1,1/(d+1))
quantiles <- head(tail(quantiles, -1),-1)
knot.times <- quantile(mcycle$times, quantiles)
}
# manual cv
pes.it <- c()
for (i in 1:50){
#Create training set
train <- mcycle %>% sample_frac(.70)
#Create test set
test  <- anti_join(mcycle, train, by = 'times')
# train it
skip_to_next <- FALSE
# Note that print(b) fails since b doesn't exist
tryCatch(model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train),
error = function(e) { skip_to_next <<- TRUE})
if(skip_to_next) { next }
#try(expr = model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train),
# test it
tryCatch(predictions <- predict(model.bs.cv, newdata = test),
error = function(e) { skip_to_next <<- TRUE})
if(skip_to_next) { next }
#predictions <- predict(model.bs.cv, newdata = test)
pes.it <- c(pes.it, mean((predictions-test$accel)**2))
}
pes <- c(pes,mean(pes.it))
}
d = 1:length(pes)
ggplot() +
geom_line(aes(x = d, y = pes)) +
geom_vline(xintercept = match(min(pes),pes), color = "red")
pes <- c()
for (d in 1:35){
if (d==1){knot.times <- median(mcycle$times)}
else{
quantiles <- seq(0,1,1/(d+1))
quantiles <- head(tail(quantiles, -1),-1)
knot.times <- quantile(mcycle$times, quantiles)
}
# manual cv
pes.it <- c()
for (i in 1:50){
#Create training set
train <- mcycle %>% sample_frac(.70)
#Create test set
test  <- anti_join(mcycle, train, by = 'times')
# train it
skip_to_next <- FALSE
# Note that print(b) fails since b doesn't exist
tryCatch(model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train),
error = function(e) { skip_to_next <<- TRUE})
if(skip_to_next) { next }
#try(expr = model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train),
# test it
tryCatch(predictions <- predict(model.bs.cv, newdata = test),
error = function(e) { skip_to_next <<- TRUE})
if(skip_to_next) { next }
#predictions <- predict(model.bs.cv, newdata = test)
pes.it <- c(pes.it, mean((predictions-test$accel)**2))
}
pes <- c(pes,mean(pes.it))
}
d = 1:length(pes)
ggplot() +
geom_line(aes(x = d, y = pes)) +
geom_vline(xintercept = match(min(pes),pes), color = "red")
pes <- c()
for (d in 1:25){
if (d==1){knot.times <- median(mcycle$times)}
else{
quantiles <- seq(0,1,1/(d+1))
quantiles <- head(tail(quantiles, -1),-1)
knot.times <- quantile(mcycle$times, quantiles)
}
# manual cv
pes.it <- c()
for (i in 1:50){
#Create training set
train <- mcycle %>% sample_frac(.70)
#Create test set
test  <- anti_join(mcycle, train, by = 'times')
# train it
skip_to_next <- FALSE
# Note that print(b) fails since b doesn't exist
tryCatch(model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train),
error = function(e) { skip_to_next <<- TRUE})
if(skip_to_next) { next }
#try(expr = model.bs.cv <- lm(accel ~ bSpline(times, knots = knot.times), data = train),
# test it
tryCatch(predictions <- predict(model.bs.cv, newdata = test),
error = function(e) { skip_to_next <<- TRUE})
if(skip_to_next) { next }
#predictions <- predict(model.bs.cv, newdata = test)
pes.it <- c(pes.it, mean((predictions-test$accel)**2))
}
pes <- c(pes,mean(pes.it))
}
d = 1:length(pes)
ggplot() +
geom_line(aes(x = d, y = pes)) +
geom_vline(xintercept = match(min(pes),pes), color = "red")
